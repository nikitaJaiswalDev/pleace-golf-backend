"use strict";
/**
 * Copyright (c) 2020 Codev Technologies (Pty) Ltd. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryService = void 0;
const _ = require("lodash");
const countries = require("../../../countries.json");
const continents = require("../../../continents.json");
const country_code_type_enum_1 = require("./country-code-type.enum");
const country_1 = require("./country");
class CountryService {
    constructor() {
    }
    mapCountry(country) {
        if (!country) {
            return null;
        }
        return new country_1.Country(country.name, country.nationality, country.continent, country.hasSubdivision, country.code, country.alternateNames, country.isState);
    }
    getCountries() {
        return _.map(countries, (country) => {
            return this.mapCountry(country);
        });
    }
    // Only Alpha2OrSubdivision type
    getCountryCodes() {
        return _.map(countries, (country) => {
            return country.code.alpha2 ? country.code.alpha2 : country.code.subdivision;
        });
    }
    getContinentCountryCodes(code) {
        let countryCodes = _.map(countries, (country) => {
            return country.continent === code ? (country.code.alpha2 ? country.code.alpha2 : country.code.subdivision) : null;
        });
        return _.reject(countryCodes, _.isNull);
    }
    getCountryCodesByContinent() {
        let continentMap = {};
        _.each(continents, (continent) => {
            continentMap[continent.code] = this.getContinentCountryCodes(continent.code);
        });
        return continentMap;
    }
    getContinents() {
        return continents;
    }
    countryCodeTypeToAttribute(countryCodeType) {
        let countryCodeTypeAttribute;
        switch (countryCodeType) {
            case country_code_type_enum_1.CountryCodeType.Numeric:
                countryCodeTypeAttribute = "numeric";
                break;
            case country_code_type_enum_1.CountryCodeType.Alpha2:
                countryCodeTypeAttribute = "alpha2";
                break;
            case country_code_type_enum_1.CountryCodeType.Alpha3:
                countryCodeTypeAttribute = "alpha3";
                break;
            case country_code_type_enum_1.CountryCodeType.Subdivision:
                countryCodeTypeAttribute = "subdivision";
                break;
            case country_code_type_enum_1.CountryCodeType.Alpha2OrSubdivision:
                countryCodeTypeAttribute = "alpha2,subdivision";
                break;
            default:
                throw new Error(`Invalid country code type: ${countryCodeType}`);
        }
        return countryCodeTypeAttribute;
    }
    getCountry(countryCode, countryCodeType) {
        let countryCodeTypeAttribute = this.countryCodeTypeToAttribute(countryCodeType);
        if (countryCodeTypeAttribute === "alpha2,subdivision") {
            return this.mapCountry(_.find(countries, function (country) {
                return country.code.alpha2 === countryCode || country.code.subdivision === countryCode;
            }));
        }
        else {
            return this.mapCountry(_.find(countries, function (country) {
                return country.code[countryCodeTypeAttribute] === countryCode;
            }));
        }
    }
    getCountryByName(countryName) {
        const formattedCountryName = countryName.toLowerCase();
        return this.mapCountry(_.find(countries, function (country) {
            const alternateNameMatch = _.some(country.alternateNames, function (alternateName) {
                return alternateName.toLowerCase() === formattedCountryName;
            });
            return country.name.toLowerCase() === formattedCountryName || alternateNameMatch;
        }));
    }
    getCountryCodeByName(countryName) {
        let country = countries.find(c => c.name.toLowerCase() === countryName.toLowerCase());
        if (country) {
            if (country.code.alpha2) {
                return country.code.alpha2;
            }
            else if (country.code.subdivision) {
                return country.code.subdivision;
            }
            else {
                return "";
            }
        }
    }
}
exports.CountryService = CountryService;
//# sourceMappingURL=data:application/json;base64,