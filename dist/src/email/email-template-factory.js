"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateFactory = void 0;
const call_to_action_email_template_1 = require("./call-to-action.email-template");
const config_1 = require("../config");
class EmailTemplateFactory {
    static createCallToActionEmailTemplate(subject, toName, toEmail, data) {
        const emailTemplate = new call_to_action_email_template_1.CallToActionEmailTemplate();
        emailTemplate.subject = subject;
        emailTemplate.to = {
            name: toName,
            email: toEmail
        };
        emailTemplate.templateId = config_1.default.email.emailTemplate.callToActionTemplateId;
        emailTemplate.templateData = data;
        return emailTemplate;
    }
    static createActivateAccountTemplate(toName, toEmail, c2aLink) {
        const subject = `Activate your ${config_1.default.app.name} account`;
        const callToActionData = {
            subject: subject,
            header: `Welcome to ${config_1.default.app.name}!`,
            text: `Please activate your account by clicking on the button below.`,
            c2aLink: c2aLink,
            c2aButton: "Activate Account"
        };
        return this.createCallToActionEmailTemplate(subject, toName, toEmail, callToActionData);
    }
    static createResetPasswordRequestTemplate(toName, toEmail, c2aLink) {
        const subject = `${config_1.default.app.name} password reset request`;
        const callToActionData = {
            subject: subject,
            header: `Password reset request`,
            text: `A request has been received to change the password for your ${config_1.default.app.name} account.`,
            c2aLink: c2aLink,
            c2aButton: "Reset Password"
        };
        return this.createCallToActionEmailTemplate(subject, toName, toEmail, callToActionData);
    }
    static createInviteeRequestTemplate(toName, toEmail, inviteeForm) {
        const subject = `${config_1.default.app.name} - Create Invitee Request`;
        const callToActionData = {
            subject: subject,
            header: `New Request !`,
            text: `Please verify the invitation below`,
            firstName: inviteeForm.firstName,
            lastName: inviteeForm.lastName,
            category: inviteeForm.category,
            type: inviteeForm.type,
            stageName: inviteeForm.stageName,
            requestedByEmail: inviteeForm.requestedByEmail,
            requestedByName: inviteeForm.requestedByName,
            c2aButton: 'Verify',
            c2aLink: config_1.default.app.baseAddress + '/admin-panel/verify-invitee/' + inviteeForm._id,
            country: inviteeForm.country
        };
        return this.createCallToActionEmailTemplate(subject, toName, toEmail, callToActionData);
    }
    static createInvitePlayerTemplate(toName, toEmail, inviteeForm) {
        const subject = `${config_1.default.app.name} - Golf Tournament Invitation`;
        const callToActionData = {
            subject: subject,
            header: ``,
            text: `Dear ${inviteeForm.firstName}, You have been invited to play in Golf Tournament - ${inviteeForm.tournamentName}.`,
            c2aButton: 'Register Now !',
            c2aLink: inviteeForm.url,
            country: inviteeForm.country
        };
        return this.createCallToActionEmailTemplate(subject, toName, toEmail, callToActionData);
    }
    static createNotifyClubTemplate(clubEmailInfo) {
        const subject = clubEmailInfo.clubName + ' - ' + clubEmailInfo.subject;
        const callToActionData = {
            subject: subject,
            header: `Update Golf Club Details !`,
            text: clubEmailInfo.body,
            c2aButton: 'Update',
            c2aLink: clubEmailInfo.golfClubPageUrl,
            clubName: clubEmailInfo.clubName,
            country: clubEmailInfo.countryCode,
        };
        return this.createCallToActionEmailTemplate(subject, clubEmailInfo.clubName, clubEmailInfo.clubEmail, callToActionData);
    }
    static createGolfClubUpdateNotificationTemplete(clubInfo, operation) {
        let subject = '';
        if (operation === 'add') {
            subject = 'New Golf Club Added - ' + clubInfo.name;
        }
        else if (operation === 'delete') {
            subject = 'Golf Club Deleted - ' + clubInfo.name;
        }
        else {
            subject = 'Golf Club Updated - ' + clubInfo.name;
        }
        const callToActionData = {
            subject: subject,
            header: `Golf Club Details !`,
            text: 'Greeting from PLeace Golf, Below Golf Club is updated in pleacegolf.world app.',
            c2aButton: 'Have a look !',
            c2aLink: clubInfo.golfClubPageUrl,
            clubName: clubInfo.name,
            country: clubInfo.countryCode,
            actionBy: clubInfo.actionBy
        };
        return this.createCallToActionEmailTemplate(subject, clubInfo.name, clubInfo.email, callToActionData);
    }
    static createNeedHelpTemplete(needHelpForm, toName, toEmail) {
        const subject = 'PLeace Golf - Need Help';
        const callToActionData = {
            subject: subject,
            header: `Need Help in PLeace Golf !`,
            text: 'Someone need your help in PLeace Golf app. Below are details',
            c2aButton: 'Go to app',
            c2aLink: 'pleacegolf.world',
            clubName: needHelpForm.club,
            country: needHelpForm.country,
            requestedByName: needHelpForm.requestedByName,
            regarding: needHelpForm.regarding,
            requestedByEmail: needHelpForm.requestedByEmail,
            details: needHelpForm.details
        };
        return this.createCallToActionEmailTemplate(subject, toName, toEmail, callToActionData);
    }
    static createHelpSupportTemplete(needHelpForm, toName, toEmail) {
        let subject = 'PLeace Golf - Help & Support';
        if (needHelpForm.app === 'pleace-awaken.me') {
            subject = 'PLeace Awaken(me) - Contact';
        }
        const callToActionData = {
            subject: subject,
            header: needHelpForm.subject,
            text: needHelpForm.message,
            requestedByName: needHelpForm.name ? needHelpForm.name : needHelpForm.firstName + ' ' + needHelpForm.lastName,
            requestedByEmail: needHelpForm.email1 ? needHelpForm.email1 : needHelpForm.email
        };
        return this.createCallToActionEmailTemplate(subject, toName, toEmail, callToActionData);
    }
}
exports.EmailTemplateFactory = EmailTemplateFactory;
//# sourceMappingURL=data:application/json;base64,