"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const https = require("https");
const http = require("http");
const fs = require("fs");
const config_1 = require("./config");
const routes_1 = require("./api/v1/routes");
const app_1 = require("./app");
const logging_1 = require("./core/logging");
const authentication_service_1 = require("./services/authentication.service");
const user_service_1 = require("./services/user.service");
const user_mongo_dao_1 = require("./daos/mongo/user.mongo.dao");
const data_importer_1 = require("./data/data-importer");
const country_service_1 = require("./core/country/country-service");
const basic_mongo_dao_1 = require("./core/dao/mongo/basic-mongo.dao");
const access_token_model_1 = require("./models/access-token.model");
const golf_club_model_1 = require("./models/golf-club.model");
const golf_club_service_1 = require("./services/golf-club.service");
const tournament_management_service_1 = require("./services/tournament-management.service");
const tournament_scorecard_mongo_dao_1 = require("./daos/mongo/tournament-scorecard.mongo.dao");
const tournament_leaderboard_mongo_dao_1 = require("./daos/mongo/tournament-leaderboard.mongo.dao");
const tournament_result_mongo_dao_1 = require("./daos/mongo/tournament-result.mongo.dao");
const tournament_mongo_dao_1 = require("./daos/mongo/tournament.mongo.dao");
const tournament_entry_model_1 = require("./models/tournament-entry.model");
const agenda_job_scheduler_1 = require("./core/jobs/agenda/agenda.job-scheduler");
const agenda_job_data_extractor_1 = require("./core/jobs/agenda/agenda.job-data-extractor");
const user_email_verification_job_1 = require("./jobs/user-email-verification.job");
const tournament_result_job_1 = require("./jobs/tournament-result.job");
const job_enum_1 = require("./jobs/job.enum");
const sendgrid_email_service_1 = require("./core/email/sendgrid/sendgrid.email-service");
const user_forgot_password_request_job_1 = require("./jobs/user-forgot-password-request.job");
const golf_course_mongo_dao_1 = require("./daos/mongo/golf-course.mongo.dao");
const data_transformer_1 = require("./data/data-transformer");
const common_service_1 = require("./services/common.service");
const sendinblue_email_service_1 = require("./core/email/sendinblue.email-service");
const create_invitee_request_job_1 = require("./jobs/create-invitee-request.job");
const notify_clubs_update_course_job_1 = require("./jobs/notify-clubs-update-course.job");
const golf_club_updated_notification_job_1 = require("./jobs/golf-club-updated-notification.job");
const need_help_job_1 = require("./jobs/need-help-job");
const help_support_job_1 = require("./jobs/help-support-job");
const invite_player_job_1 = require("./jobs/invite-player-job");
class Server {
    constructor(agendaDependency) {
        this.agendaDependency = agendaDependency;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            // Job Scheduler
            const agenda = yield this.agendaDependency.getClient();
            const agendaJobScheduler = new agenda_job_scheduler_1.AgendaJobScheduler(agenda);
            // DAOs
            const userMongoDAO = new user_mongo_dao_1.UserMongoDAO();
            const golfClubMongoDAO = new basic_mongo_dao_1.BasicMongoDAO(golf_club_model_1.GolfClubSchema);
            const golfCourseMongoDAO = new golf_course_mongo_dao_1.GolfCourseMongoDAO();
            const accessTokenMongoDAO = new basic_mongo_dao_1.BasicMongoDAO(access_token_model_1.AccessTokenSchema);
            const tournamentMongoDAO = new tournament_mongo_dao_1.TournamentMongoDAO();
            const tournamentScorecardMongoDAO = new tournament_scorecard_mongo_dao_1.TournamentScorecardMongoDAO();
            const tournamentLeaderboardMongoDAO = new tournament_leaderboard_mongo_dao_1.TournamentLeaderboardMongoDAO();
            const tournamentResultMongoDAO = new tournament_result_mongo_dao_1.TournamentResultMongoDAO();
            const tournamentEntryMongoDAO = new basic_mongo_dao_1.BasicMongoDAO(tournament_entry_model_1.TournamentEntrySchema);
            // Services
            const countryService = new country_service_1.CountryService();
            const authService = new authentication_service_1.AuthenticationService();
            const userService = new user_service_1.UserService(userMongoDAO, accessTokenMongoDAO, agendaJobScheduler);
            const golfClubService = new golf_club_service_1.GolfClubService(golfClubMongoDAO);
            const tournamentManagementService = new tournament_management_service_1.TournamentManagementService(tournamentMongoDAO, tournamentEntryMongoDAO, tournamentResultMongoDAO, tournamentScorecardMongoDAO, tournamentLeaderboardMongoDAO);
            const sendgridEmailService = new sendgrid_email_service_1.SendgridEmailService(config_1.default.email.sendgridApiKey, config_1.default.email.fromEmail, config_1.default.email.replyEmail);
            const sendinblueEmailService = new sendinblue_email_service_1.SendinblueEmailService(config_1.default.email.sendinblueApiKey, config_1.default.email.fromEmail, config_1.default.email.adminEmail);
            // Data Importer
            const dataImporter = new data_importer_1.DataImporter(golfClubMongoDAO, golfCourseMongoDAO, accessTokenMongoDAO, tournamentMongoDAO, config_1.default.dataImportFilePath, countryService, config_1.default.dataImportFilePathNew);
            // Data Transformer
            const dataTransformer = new data_transformer_1.DataTransformer(golfClubMongoDAO, golfCourseMongoDAO, accessTokenMongoDAO, tournamentMongoDAO, config_1.default.dataTransformFilePath, countryService);
            //common service 
            const commonService = new common_service_1.CommonService(golfCourseMongoDAO, agendaJobScheduler);
            // Jobs
            const agendaJobDataExtractor = new agenda_job_data_extractor_1.AgendaJobDataExtractor();
            //const userEmailVerificationJob = new UserEmailVerificationJobProcessor(agendaJobDataExtractor, sendgridEmailService);
            const userEmailVerificationJob = new user_email_verification_job_1.UserEmailVerificationJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            //const userForgotPasswordRequestJob = new UserForgotPasswordRequestJobProcessor(agendaJobDataExtractor, sendgridEmailService);
            const userForgotPasswordRequestJob = new user_forgot_password_request_job_1.UserForgotPasswordRequestJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            const createInviteeRequestJobProcessor = new create_invitee_request_job_1.CreateInviteeRequestJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            const invitePlayerJobProcessor = new invite_player_job_1.InvitePlayerJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            const notifyClubsUpdateCourseJobProcessor = new notify_clubs_update_course_job_1.NotifyClubsUpdateCourseJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            const golfClubUpdatedNotificationJobProcessor = new golf_club_updated_notification_job_1.GolfClubUpdatedNotificationJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            const needHelpJobProcessor = new need_help_job_1.NeedHelpJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            const helpSupportJobProcessor = new help_support_job_1.HelpSupportJobProcessor(agendaJobDataExtractor, sendinblueEmailService);
            const tournamentResultJob = new tournament_result_job_1.TournamentResultJobProcessor(agendaJobDataExtractor, tournamentManagementService);
            // Register jobs
            this.agendaDependency.registerJobDefinitions(userEmailVerificationJob, userForgotPasswordRequestJob, tournamentResultJob, createInviteeRequestJobProcessor, notifyClubsUpdateCourseJobProcessor, needHelpJobProcessor, helpSupportJobProcessor, invitePlayerJobProcessor);
            // Clean jobs
            yield this.agendaDependency.removeUndefinedBehaviourJobs();
            // Start job queue processing
            yield this.agendaDependency.start();
            // Schedule recurring jobs
            const schedulerOptions = { skipImmediate: true };
            yield agendaJobScheduler.every('15 minutes', job_enum_1.Job.TournamentResultJob, {}, schedulerOptions);
            //await agendaJobScheduler.every('2 minutes', 'UserEmailVerificationJob', {}, schedulerOptions);
            //await agendaJobScheduler.now("UserEmailVerificationJob");
            const routerV1 = new routes_1.ApiRouter(authService, userService, countryService, golfClubService, tournamentManagementService, dataImporter, dataTransformer, commonService);
            const routersMap = {
                "": routerV1,
                "v1": routerV1,
            };
            this.app = (new app_1.App(routersMap, userService, this.agendaDependency)).getApp();
            this.app.set("port", config_1.default.api.port);
            if (config_1.default.https.isEnabled) {
                let options = {
                    key: fs.readFileSync(config_1.default.https.keyPath),
                    cert: fs.readFileSync(config_1.default.https.certPath)
                };
                this.server = https.createServer(options, this.app);
            }
            else {
                this.server = http.createServer(this.app);
            }
        });
    }
    start() {
        this.server.listen(config_1.default.api.port);
        this.server.on("error", (ex) => { this.onError(ex); });
        this.server.on("listening", () => { this.onListening(); });
    }
    onError(ex) {
        logging_1.Logger.info('Error...');
        logging_1.Logger.error(ex);
    }
    onListening() {
        const addr = this.server.address();
        const bind = (typeof addr === "string") ? `${addr}` : `${addr.port}`;
        logging_1.Logger.info(`API is listening on port: ${bind}`);
    }
    getApp() {
        return this.app;
    }
}
exports.Server = Server;
//# sourceMappingURL=data:application/json;base64,