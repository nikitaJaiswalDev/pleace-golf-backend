"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiRouter = void 0;
const express_1 = require("express");
const controllers = require("./controllers");
class ApiRouter {
    constructor(authService, userService, countryService, golfClubService, tournamentManagmentService, dataImporter, dataTransformer, commonService) {
        this.swaggerController = new controllers.SwaggerController();
        this.authenticationController = new controllers.AuthenticationController(authService, userService);
        this.userController = new controllers.UserController(userService, authService);
        this.golfClubController = new controllers.GolfClubController(golfClubService);
        this.tournamentController = new controllers.TournamentController(tournamentManagmentService, userService);
        this.countryController = new controllers.CountryController(countryService);
        this.dataController = new controllers.DataController(dataImporter, dataTransformer);
        this.rankingController = new controllers.RankingController(tournamentManagmentService, userService);
        this.commonController = new controllers.CommonController(commonService);
        this.router = (0, express_1.Router)();
        this._init();
    }
    getRouter() {
        return this.router;
    }
    _init() {
        this.router.use("/swagger", this.swaggerController.getRouter());
        this.router.use("/auth", this.authenticationController.getRouter());
        this.router.use("/user", this.userController.getRouter());
        this.router.use("/golf-club", this.golfClubController.getRouter());
        this.router.use("/tournament", this.tournamentController.getRouter());
        this.router.use("/country", this.countryController.getRouter());
        this.router.use("/data", this.dataController.getRouter());
        this.router.use("/ranking", this.rankingController.getRouter());
        this.router.use("/common", this.commonController.getRouter());
    }
}
exports.ApiRouter = ApiRouter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS92MS9yb3V0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQWlDO0FBRWpDLDZDQUE2QztBQVU3QyxNQUFhLFNBQVM7SUFhbEIsWUFDSSxXQUFrQyxFQUNsQyxXQUF3QixFQUN4QixjQUE4QixFQUM5QixlQUFnQyxFQUNoQywwQkFBdUQsRUFDdkQsWUFBMEIsRUFDMUIsZUFBZ0MsRUFDaEMsYUFBNkI7UUFFN0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDN0QsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksV0FBVyxDQUFDLHdCQUF3QixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNuRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksV0FBVyxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQywwQkFBMEIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMxRyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxXQUFXLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQywwQkFBMEIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNwRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFBLGdCQUFNLEdBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVNLFNBQVM7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVPLEtBQUs7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDSjtBQW5ERCw4QkFtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5cclxuaW1wb3J0ICogYXMgY29udHJvbGxlcnMgZnJvbSBcIi4vY29udHJvbGxlcnNcIjtcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvdXNlci5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IENvdW50cnlTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvY291bnRyeS9jb3VudHJ5LXNlcnZpY2VcIjtcclxuaW1wb3J0IHsgR29sZkNsdWJTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2dvbGYtY2x1Yi5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IFRvdXJuYW1lbnRNYW5hZ2VtZW50U2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy90b3VybmFtZW50LW1hbmFnZW1lbnQuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBEYXRhSW1wb3J0ZXIgfSBmcm9tIFwiLi4vLi4vZGF0YS9kYXRhLWltcG9ydGVyXCI7XHJcbmltcG9ydCB7IERhdGFUcmFuc2Zvcm1lciB9IGZyb20gXCIuLi8uLi9kYXRhL2RhdGEtdHJhbnNmb3JtZXJcIjtcclxuaW1wb3J0IHsgQ29tbW9uU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9jb21tb24uc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFwaVJvdXRlciB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN3YWdnZXJDb250cm9sbGVyOiBjb250cm9sbGVycy5Td2FnZ2VyQ29udHJvbGxlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXV0aGVudGljYXRpb25Db250cm9sbGVyOiBjb250cm9sbGVycy5BdXRoZW50aWNhdGlvbkNvbnRyb2xsZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVzZXJDb250cm9sbGVyOiBjb250cm9sbGVycy5Vc2VyQ29udHJvbGxlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ29sZkNsdWJDb250cm9sbGVyOiBjb250cm9sbGVycy5Hb2xmQ2x1YkNvbnRyb2xsZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRvdXJuYW1lbnRDb250cm9sbGVyOiBjb250cm9sbGVycy5Ub3VybmFtZW50Q29udHJvbGxlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY291bnRyeUNvbnRyb2xsZXI6IGNvbnRyb2xsZXJzLkNvdW50cnlDb250cm9sbGVyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBkYXRhQ29udHJvbGxlcjogY29udHJvbGxlcnMuRGF0YUNvbnRyb2xsZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJhbmtpbmdDb250cm9sbGVyOiBjb250cm9sbGVycy5SYW5raW5nQ29udHJvbGxlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tbW9uQ29udHJvbGxlcjogY29udHJvbGxlcnMuQ29tbW9uQ29udHJvbGxlcjtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlcjogUm91dGVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGF1dGhTZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLFxyXG4gICAgICAgIGNvdW50cnlTZXJ2aWNlOiBDb3VudHJ5U2VydmljZSxcclxuICAgICAgICBnb2xmQ2x1YlNlcnZpY2U6IEdvbGZDbHViU2VydmljZSxcclxuICAgICAgICB0b3VybmFtZW50TWFuYWdtZW50U2VydmljZTogVG91cm5hbWVudE1hbmFnZW1lbnRTZXJ2aWNlLFxyXG4gICAgICAgIGRhdGFJbXBvcnRlcjogRGF0YUltcG9ydGVyLFxyXG4gICAgICAgIGRhdGFUcmFuc2Zvcm1lcjogRGF0YVRyYW5zZm9ybWVyLFxyXG4gICAgICAgIGNvbW1vblNlcnZpY2UgOiBDb21tb25TZXJ2aWNlXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnN3YWdnZXJDb250cm9sbGVyID0gbmV3IGNvbnRyb2xsZXJzLlN3YWdnZXJDb250cm9sbGVyKCk7XHJcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvbkNvbnRyb2xsZXIgPSBuZXcgY29udHJvbGxlcnMuQXV0aGVudGljYXRpb25Db250cm9sbGVyKGF1dGhTZXJ2aWNlLCB1c2VyU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy51c2VyQ29udHJvbGxlciA9IG5ldyBjb250cm9sbGVycy5Vc2VyQ29udHJvbGxlcih1c2VyU2VydmljZSwgYXV0aFNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuZ29sZkNsdWJDb250cm9sbGVyID0gbmV3IGNvbnRyb2xsZXJzLkdvbGZDbHViQ29udHJvbGxlcihnb2xmQ2x1YlNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMudG91cm5hbWVudENvbnRyb2xsZXIgPSBuZXcgY29udHJvbGxlcnMuVG91cm5hbWVudENvbnRyb2xsZXIodG91cm5hbWVudE1hbmFnbWVudFNlcnZpY2UsIHVzZXJTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNvdW50cnlDb250cm9sbGVyID0gbmV3IGNvbnRyb2xsZXJzLkNvdW50cnlDb250cm9sbGVyKGNvdW50cnlTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmRhdGFDb250cm9sbGVyID0gbmV3IGNvbnRyb2xsZXJzLkRhdGFDb250cm9sbGVyKGRhdGFJbXBvcnRlciwgZGF0YVRyYW5zZm9ybWVyKTtcclxuICAgICAgICB0aGlzLnJhbmtpbmdDb250cm9sbGVyID0gbmV3IGNvbnRyb2xsZXJzLlJhbmtpbmdDb250cm9sbGVyKHRvdXJuYW1lbnRNYW5hZ21lbnRTZXJ2aWNlLCB1c2VyU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5jb21tb25Db250cm9sbGVyID0gbmV3IGNvbnRyb2xsZXJzLkNvbW1vbkNvbnRyb2xsZXIoY29tbW9uU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSBSb3V0ZXIoKTtcclxuICAgICAgICB0aGlzLl9pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFJvdXRlcigpOiBSb3V0ZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvdXRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pbml0KCkge1xyXG4gICAgICAgIHRoaXMucm91dGVyLnVzZShcIi9zd2FnZ2VyXCIsIHRoaXMuc3dhZ2dlckNvbnRyb2xsZXIuZ2V0Um91dGVyKCkpO1xyXG4gICAgICAgIHRoaXMucm91dGVyLnVzZShcIi9hdXRoXCIsIHRoaXMuYXV0aGVudGljYXRpb25Db250cm9sbGVyLmdldFJvdXRlcigpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci51c2UoXCIvdXNlclwiLCB0aGlzLnVzZXJDb250cm9sbGVyLmdldFJvdXRlcigpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci51c2UoXCIvZ29sZi1jbHViXCIsIHRoaXMuZ29sZkNsdWJDb250cm9sbGVyLmdldFJvdXRlcigpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci51c2UoXCIvdG91cm5hbWVudFwiLCB0aGlzLnRvdXJuYW1lbnRDb250cm9sbGVyLmdldFJvdXRlcigpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci51c2UoXCIvY291bnRyeVwiLCB0aGlzLmNvdW50cnlDb250cm9sbGVyLmdldFJvdXRlcigpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci51c2UoXCIvZGF0YVwiLCB0aGlzLmRhdGFDb250cm9sbGVyLmdldFJvdXRlcigpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci51c2UoXCIvcmFua2luZ1wiLCB0aGlzLnJhbmtpbmdDb250cm9sbGVyLmdldFJvdXRlcigpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci51c2UoXCIvY29tbW9uXCIsIHRoaXMuY29tbW9uQ29udHJvbGxlci5nZXRSb3V0ZXIoKSk7XHJcbiAgICB9XHJcbn1cclxuIl19